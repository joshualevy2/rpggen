import random
import sys
import unittest
import json

sys.path.append('..')
from CepheusTraveller import Character
from GetFromWeb import GetFromWeb
from rpggen import Rpggen, Select, Table
from Traveller import Attribute, Traveller

# TODO Why not CepheusTraveller.Character?
class YoungThug(Character):

   meleeSkills = Table("MeleeSkills", ['Melee Combat (Blugeoning)','Melee Combat (Natural)',
		                                 'Melee Combat (Piercing)', 'Melee Combat (Slashing)'])
   weaponSkills = Table("WeaponsSkills", ['Gun Combat (Energy Rifle)','Gun Combat (Energy Pistol)',
		                                    'Gun Combat (Shotgun)', 'Gun Combat (Slug Rifle)',
		                                    'Gun Combat (Slug Pistol)'])
   otherSkills = Table("OtherSkills", ['Bribery','Gambling',
		                                 ])
   def __init__(self):
   	  super().__init__()

   def generate(self):
      self.name = GetFromWeb.get('names')
      self.lastCareer = "No Career"    
      self.str = Rpggen.roll('2d5+2')
      self.dex = Rpggen.roll('2d5+2')
      self.end = Rpggen.roll('2d5+2')
      self.int = Rpggen.roll('2d5')
      self.edu = Rpggen.roll('2d2')
      self.soc = Rpggen.roll('2d3')

      level = Select.choose(['teen','start', 'young'])
      if level == 'teen':
       self.age = Rpggen.roll('1d3+15')
       self.terms = 0  
       numSkills = 3   # TODO right number?     
      elif level == 'start':
       self.age = Rpggen.roll('1d3+17')
       self.terms = 0     
       numSkills = 5   #  
      elif level == 'young':
       self.lastCareer = "Rogue"   
       self.age = Rpggen.roll('1d3+21')
       self.terms = 1
       numSkills = 9 # TODO right number?  Basic Training plus above.
      else:
       raise ValueError('level is an unknown value: %s' % level)

    # Three issues here: what skills, and what level (also equipment based on skills)
    # So we cycle through skills like this: 
    #   Brawling, Weapon, Something Else
    #   Until we are done with the skills the character has.
    # Most skills will be 0 or 1 at this point, but a few will be 2.
    # teens get 1 skill at 1, rest at 0    (20% change a 0 becomes a 2)
    # start get 3 skills at 1, rest at 0   (20% change a 1 to a 2)
    # young get 7 skills at 1, rest at 0   (20% change a 1 to a 2)

    # lucky means the character get more skills
      lucky = (Rpggen.roll('1d5') == 1)
      for idx in range(1, numSkills):
       if idx < 7:
          if idx % 3 == 1:
             skill = Attribute(self.meleeSkills.use(),0)
             self.skills.append(skill)
          if idx % 3 == 2:
             skill = Attribute(self.weaponSkills.use(),0)
             self.skills.append(skill) 
          if idx % 3 == 0:
             skill = Attribute(self.otherSkills.use(),0)
             self.skills.append(skill)
       else:
             skill = Attribute(self.otherSkills.use(),0)
             self.skills.append(skill)       	
      if level == 'teen':
       pass   
      elif level == 'start':
       pass
      elif level == 'young':
       pass
      else:
       raise ValueError('level is an unknown value: %s' % level)

      # Loop through each skills, and give any equipment that makes sense.
      for attr in self.skills:
       if attr.specific is not None:
          if attr.specific == 'Blugeoning':
             self.equipment.append('Billy Club')
          elif attr.specific == 'Natural':
             self.equipment.append('Pipe')
          elif attr.specific == 'Piercing':
             self.equipment.append('Shiv')
          elif attr.specific =='Slashing':
             self.equipment.append('Knife')
          else:
             self.equipment.append(attr.specific)
          	 #print('Specific Melee skill is not known: %s' % attr.specific)
             pass
      # Figure out how much money he has 
      # TODO: refine algorithm
      # TODO: add bling
      pocket = int(Rpggen.roll('2d20')) * 10
      bank = int(Rpggen.roll('2d5')) * 100
      self.money = { 'pocket': pocket, 'bank': bank, 'pension': 0}

      # Add some events

   def text(self):
      return self.strSmall()

   @classmethod
   def htmlPage(self, count=10):
      characters = []
      for ii in range(count):
         characters.append(YoungThug())
         characters[ii].generate()
      str = '<html><head></head><body>\n'
      str += '<html><head></head><body>\n'
      for ii in range(count):
         ch = characters[ii]
         tmp = ch.text()
         str += tmp
         str += '<p>\n'
      str += '<br><small>Generated by Joshua Levy "Young Thugs" web server in 2017 version 0.1</small>\n'
      str += '</body></html>\n'
      return str

if __name__ == '__main__':    
    yt = YoungThug()
    yt.generate()
    print(yt.strSmall())
    #print(yt.dict())

    #str = YoungThug.htmlPage()
    #print(str)