
# Set this variable True for running on your local machine (it will use port 1188 and 
# several debugging options), but False for production use on PythonAnywhere.com.
import socket
development = True
if 'PythonAnywhere' in socket.getfqdn():
   development = False

from bottle import error, route, request, response, run, template, default_app
import json
import sys
from yattag import Doc



if development:
   sys.path.append('..')
else:
   sys.path.append('/home/joshualevy/rpggen')

from Rpggen import Rpggen, Table

if development:
   baseUrl = 'http://localhost:1188'
else:
   baseUrl = 'http://joshualevy.pythonanywhere.com'

globalHelp = ''

# Formatting functions
class formatting():
   '''This class is a singleton which contains function useful to formatting html.'''
   def html(results):
      doc, tag, text = Doc().tagtext()
      with tag("html"):
         with tag("head"):
            pass
         with tag("body"):
            for result in results:
               doc.asis('<br>')
               text(result)
      return doc.getvalue()

   def htmlPage(results, count=10):

      doc, tag, text = Doc().tagtext()
      with tag("html"):
         with tag("head"):
           pass
         with tag("body"):
            with tag("table", width = '100%', border=2, style='table-layout: fixed;'):
               for ii in range(int(count/2)):
                  with tag("tr", border=2):
                    for jj in range(2):
                      with tag('td', width = '50%', height = '25%', padding='15', border=2, style='word-wrap:break-word;'):
                        result = results[ii]
                        tmp = result.html()
                        doc.asis(tmp)
            doc.asis('<br>')
            with tag('small'):
               with tag('center'):
                  text('Generated by Joshua Levy "Young Thugs" web server in 2017 version %s' % self.version)
      return doc.getvalue()   

   def text(results):
      return ', '.join(results)   

   def link(tag, text, url):
      with tag('a', href=url):
         text(url)   

# Routing functions which are global to the server (ie. not for any one micro-service).

@route('/')
@route('/help')
def help():
   doc, tag, text = Doc().tagtext()
   with tag("html"):
      with tag("head"):
         pass
      with tag("body"):
         with tag('p'):
           text('This is an experimental server run by Joshua Levy.  '
                'It is running a collection of micro services which return data useful '
                'in role playing games.')
         with tag('p'):
           text('You can always goto %s/help to get this help message.' % baseUrl)  
          
         doc.asis(globalHelp)  

         with tag('h2'):
            text('Formatting Output')
         with tag('p'):
           text('Most (but not all) of the micro-services support the following formats, '
                'which you can set by adding "?format=htmlPage" (or whicheer format you want) '
                'to the end of your URL.')              
         with tag('dl'):
            with tag('dt'):
               text('htmlPage')
            with tag('dd'):
               text('Prints several results on one web page.  Each result is html formatted.  '
                    'This is often the best if you are a GM.  You can see several options at a '
                    'glance, and choose the one you like the most.')  
            with tag('dt'):
               text('json')
            with tag('dd'):
               text('Your results, encoded as json, ready for use by other programs.  '
                    'You can think of this as the REST API for the micro-service.  '
                    'Note that the data structure is usually a dictionary, but sometimes '
                    'list.  Each micro-service\'s help page will more details on that.') 
            with tag('dt'):
               text('jsonHtml')
            with tag('dd'):
               text('Json results, but wrapped in HTML so people can read them more easily.')                
            with tag('dt'):
               text('html')
            with tag('dd'):
               text("Results formatted in html; This is similar to Google's old \"I'm "
                    "Feeling Lucky\" "
                    "button.  Used for testing output, mostly.")
            with tag('dt'):
               text('htmlText')
            with tag('dd'):
               text('Prints one with minimal "plaintext" formatting, so that it looks ok in html.')               
            with tag('dt'):
               text('text') 
            with tag('dd'):
               text('Plain text.  Looks ugly in browsers, but great for cut-n-paste.')                     
   return doc.getvalue()

@error(404)
def error404(error):
   doc, tag, text = Doc().tagtext()
   with tag("html"):
      with tag("head"):
         pass
      with tag("body"):
         with tag('p'):
            text("The page you are looking for doesn't exist.")
         with tag('blockquote'):
               with tag('a', href='%s/help' % baseUrl):
                 text('%s/help' % baseUrl)
               doc.stag('br')
               text('To see a general help message.') 
   return doc.getvalue()   


# Routing for each mini-server
#
# To add a mini-server, you should create the following functions:
# xGlobalHelp: Adds a string to the global help page describing your mini-server.
# /x/help -> xHelp: Creates the help page for your mini-server.
# /x/..anything.. -> ..anything..: Handles returns the data for your mini-service.
#
# x is a letter or two that identifies your mini-service.
# You can use p (the personality service) or yt (the young thug service) as an example.

# Routing for the Personality ("p") miniserver.

def pGlobalHelp():
   global globalHelp
   doc, tag, text = Doc().tagtext()
   with tag('h2'):
         text('Personality Servers: Personalities for NPCs and PCs')
   with tag('p'):
      text('Returns a simple personality use in RPG characters.')         
   with tag('blockquote'):
         text('Get help: ')
         formatting.link(tag, text, '%s/p/help' % baseUrl)
         doc.stag('br')
         text('Try it: ')
         formatting.link(tag, text, '%s/p/1000words/3?format=json' % baseUrl)
         doc.stag('br')
         text('Or try this: ')
         formatting.link(tag, text, '%s/p/100words/3?format=html' % baseUrl)

   globalHelp += doc.getvalue()   

pGlobalHelp()   

@route('/p/help')
def pHelp():
   doc, tag, text = Doc().tagtext()
   with tag("html"):
      with tag("head"):
         with tag('style'):
            text('''dl {
   # border: 3px double #ccc;
   # padding: 0.5em;
  }
  dt {
    float: left;
    clear: left;
    width: 100px;
    text-align: right;
    font-weight: bold;
  }
  dt::after {
    content: ":";
  }
  dd {
    margin: 0 0 0 110px;
    padding: 0 0 0.5em 0;
  }''')
      with tag("body"):
         with tag('p'):
            text('This server returns personalities for NPCs and PCs in role playing games.  '+
                 'Examples of use include:')
         with tag('ul'):
            with tag('li'):
               formatting.link(tag, text, '%s/p/1000words/3' % baseUrl) 
               text('  Prints out 3 selections from a list of 1000 personality traits.')
            with tag('li'):
               formatting.link(tag, text, '%s/p/100words/30?format=text' % baseUrl) 
               text('  Prints out 30 selections from a list of 100 personality traits, and '
                    'show them in text format.')
            with tag('li'):
               formatting.link(tag, text, '%s/p/help' % baseUrl)
               text(' To see this help message.') 
         with tag('p'):
            text('The URL text right after the "/p/" determines how the personality will '
                 'be generated:')                              
         with tag('dl'):
            with tag('dt'):
               text('1000words')
            with tag('dd'):
               text('Choose personality traits from a list of 1000 words.')
               doc.stag('br')
               text('This list was originally created by Chad Samuels and publicised on Johnn '
                    'Four\'s Roleplaying Tips blog.  You can read more about it here:')
               formatting.link(tag, text, 'https://roleplayingtips.com/tools/1000-npc-traits')               
            with tag('dt'):
               text('100words')
            with tag('dd'):
               text('Choose personality traits from a list of 100 words.')   
               doc.stag('br') 
               text('This list was originally created on the Other Worlds RPG Blog.  You can '
                    'read more about it here:')
               formatting.link(tag, text, 'https://otherworldsrpg.wordpress.com/2012/06/28/d100-random-npc-personality-traits-table')
         with tag('p'):
               text('The following format varibles are supprted:')              
         with tag('dl'):
            with tag('dt'):
               text('html')
            with tag('dd'):
               text('Results formatted in html; best for human viewing.')
            with tag('dt'):
               text('text') 
            with tag('dd'):
               text('Plain text.  Looks ugly in browsers, but great for cut-n-paste.')
            with tag('dt'):
               text('htmlText')
            with tag('dd'):
               text('The same as text, but formatted so that it looks ok in html.')
            with tag('dt'):
               text('json')
            with tag('dd'):
               text('Your results, encoded as a list, ready for use by other programs.  '
                    'You can think of this as the REST API for a personality service.')
            with tag('dt'):
               text('jsonHtml')
            with tag('dd'):
               text('Json results, but wrapped in HTML so people can read them more easily.')               

         with tag('p'):
            with tag('b'):
               text('My Reuqest To Users')
         with tag('p'):
            text('Please send me feedback on the personality traits this web page gives you! '
                 'You can send email to publicjoshualevy at g mail dot com, or send a private '
                 'message to joshualevy on the CoTI software forum here: ')   
            formatting.link(tag, text, 'http://www.travellerrpg.com/CotI/Discuss/')
         with tag('p'):
            with tag('b'):
               text('Advice On Using This Website')
         with tag('p'):
            text('For NPCs, I think that the best way to generate a personality is to run this command:') 
         with tag('blockquote'):
            with tag('a', href='https://joshualevy.pythonanywhere.com/p/1000words/3'):
               text('https://joshualevy.pythonanywhere.com/p/1000words/3') 
         with tag('p'): 
            text("And then toss out any traits that don't fit, and arrage the rest in order of "+
                 "importance.  Most important first.  It's quick, easy, and I've found that it "+
                 "gives results which are both good and useful. If you find that you are tossing "+
                 "out more than 2 traits on average, then start out with 4 or more.  The goal is "+
                 "to end up with 2 or 3 good ones, in the order you like.")  
         with tag('p'):
            text('For PCs, the method above works ok, not great.  I prefer a different '+
                 'technique which is not supported yet, but will be soon.') 
      #   with tag('blockquote'):
      #      with tag('a', href='https://joshualevy.pythonanywhere.com/p/1000words/3'):
      #         text('https://joshualevy.pythonanywhere.com/p/1000words/3')   
      #   with tag('p'): 
      #      text("And then toss out any traits that don't fit, and arrage the rest in order of "+
      #           "importance, most important first.  It's quick, easy, and I've found that it "+
      #           "gives results which are both good and useful. If you find that you are tossing "+
      #           "out more than 2 traits on average, then start out with 4 or more.  The goal is "+
      #           "to end up with 2 or 3 good ones, in the order you like.") 
   return doc.getvalue()   

@route('/p/<method>')
@route('/p/<method>/<num:int>')
def PersonalityTraits1000(method, num=3):
   results = []
   if method == "1000words":   
      results = PersonalityTraits1000Tab.useRepeatedly(num, unique=True)
   elif method == "100words":
      results = PersonalityTraits100Tab.useRepeatedly(num, unique=True)
   else:
      return 'Method is not supported.  Supported methods are: 1000words and 100words.'
   if request.query.format == '' or request.query.format == 'html':
      return formatting.html(results)
   elif request.query.format == 'htmlText':
      return '<pre>'+formatting.text(results)+'</pre>'
   elif request.query.format == 'json':
      #return json.dumps(results, default=lambda o: o.__dict__, 
      #               sort_keys=True, indent=4)     
      return Rpggen.toJson(results) 
   elif request.query.format == 'jsonHtml':
      return '<pre>'+Rpggen.toJson(results)+'</pre>'       
   elif request.query.format == 'text':
      return formatting.text(results) 	  
   else:
   	  return ('Unknown format query variable.'
   	  	      '  Right now, only "text", "html", "htmlText, and "htmlPage" is supported.')

# Routing for the YoungThug ("yt") miniserver.

from YoungThugs import YoungThug

def ytGlobalHelp():
   global globalHelp
   doc, tag, text = Doc().tagtext()
   with tag('h2'):
         text('Young Thug Micro-Servers: Young Thugs NPCs')
   with tag('p'):
      text('The guys hanging around bars, alleys, docks, crime scenes, etc.  They are 16-22 years '
           'old (0 or 1 terms) and light on skills, but heavy on weapons!')
   with tag('blockquote'):
      text("If you're a GM get several thugs, and choose one to use: ")
      formatting.link(tag, text, '%s/yt?format=htmlPage' % baseUrl)
      doc.stag('br')
      text('If you want a REST interface with a json response, try this: ')
      formatting.link(tag, text, '%s/yt?format=json' % baseUrl)
      doc.stag('br')
      text('Get help: ')
      formatting.link(tag, text, '%s/yt/help' % baseUrl)

   globalHelp += doc.getvalue()   

ytGlobalHelp()   

@route('/yt/help')
def ytHelp():
   doc, tag, text = Doc().tagtext()
   with tag("html"):
      with tag("head"):
         with tag('style'):
            text('''dl {
   # border: 3px double #ccc;
   # padding: 0.5em;
  }
  dt {
    float: left;
    clear: left;
    width: 100px;
    text-align: right;
    font-weight: bold;
  }
  dt::after {
    content: ":";
  }
  dd {
    margin: 0 0 0 110px;
    padding: 0 0 0.5em 0;
  }''')
      with tag("body"):
         with tag('p'):
            text('The guys hanging around bars, alleys, docks, crime scenes, etc.  They '
                 'are 16-22 years '
                 'old (0 or 1 terms) and light on skills, but heavy on weapons!')

         text("If you're a GM get several thugs, and choose one to use: ")
         formatting.link(tag, text, '%s/yt?format=htmlPage' % baseUrl)
         doc.stag('br')
         text('If you want a REST interface with a json response, try this: ')
         formatting.link(tag, text, '%s/yt?format=json' % baseUrl)
         doc.stag('br')
         text('To see this page again: ')
         formatting.link(tag, text, '%s/yt/help' % baseUrl)
         with tag('p'):
               text('The following format varibles are supprted:')              
         with tag('dl'):
            with tag('dt'):
               text('html')
            with tag('dd'):
               text('Results formatted in html; best for human viewing.')
            with tag('dt'):
               text('text') 
            with tag('dd'):
               text('Plain text.  Looks ugly in browsers, but great for cut-n-paste.')
            with tag('dt'):
               text('htmlText')
            with tag('dd'):
               text('The same as text, but formatted so that it looks ok in html.')
            with tag('dt'):
               text('json')
            with tag('dd'):
               text('Your results, encoded as a list, ready for use by other programs.  '
                    'You can think of this as the REST API for a personality service.')
            with tag('dt'):
               text('jsonHtml')
            with tag('dd'):
               text('Json results, but wrapped in HTML so people can read them more easily.')                

         with tag('p'):
            with tag('b'):
               text('My Reuqest To Users')
         with tag('p'):
            text('Please send me feedback on the personality traits this web page gives you! '
                 'You can send email to publicjoshualevy at g mail dot com, or send a private '
                 'message to joshualevy on the CoTI software forum here: ')   
            formatting.link(tag, text, 'http://www.travellerrpg.com/CotI/Discuss/')
         with tag('p'):
            with tag('b'):
               text('Advice On Using This Website')
         with tag('p'):
            text('If you are a Game Master and want some young thugs, I '
                 'would run the following command, and then choose asmany '
                 'as you want. Rerun the command if you need more:') 
         with tag('blockquote'):
            formatting.link(tag, text, '%s/yt?format=htmlPage' % baseUrl)
         with tag('p'): 
            text('If a thug looks good, but has one bad personality trait, or '
                 'one bad skill, or one bad anything, just remove it.  Or '
                 'replace it with something different.')  
   return doc.getvalue()   

@route('/yt')
def youngthug():
   yt = YoungThug()
   yt.generate()
   if request.query.format == '' or request.query.format == 'html':
      return yt.html()
   elif request.query.format == 'htmlText':
    return yt.htmlText()      
   elif request.query.format == 'text':
      return yt.strSmall()
   elif request.query.format == 'htmlPage':
      return yt.htmlPage()
   elif request.query.format == 'json':
      return Rpggen.toJson(yt)  
   elif request.query.format == 'jsonHtml':
      return '<pre>'+Rpggen.toJson(yt)+'</pre>' 
   else:
      return ('Unknown format query variable.'
              '  Right now, only "text", "html", and "htmlPage" is supported.')

rpggen = Rpggen()
PersonalityTraits100Tab = Rpggen.loadLt("PersonalityTraits100.lt")
PersonalityTraits1000Tab = Rpggen.loadLt("PersonalityTraits.lt")
if development:
   # bottle.debug(True)
   run(host='localhost', port=1188, reloader=True, debug=False)
else:
   # bottle.run(server='paste')
   application = default_app()